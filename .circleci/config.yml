# Golang CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

executors:
  golang:
    docker:
    - image: cimg/go:1.22.4
  python:
    docker:
    - image: cimg/python:3.12.4

jobs:
  codespell:
    executor: python
    steps:
    - checkout
    - run: pip3 install codespell
    - run: codespell --skip=".git,go.sum"

  test:
    executor: golang
    steps:
    - checkout
    - run: go mod download
    - run: make promu
    - run: make
    - store_artifacts:
        path: openziti_exporter
        destination: /build/openziti_exporter
    - run: rm -v openziti_exporter
  build:
    machine:
      image: ubuntu-2204:current
    parallelism: 3
    steps:
    - checkout
    - run: go mod download
    - run: make promu
    - run:
        name: Run linuxkit/binfmt
        command: |
          docker run --privileged linuxkit/binfmt:v1.0.0
    - run:
        name: Build Linux
        command: |
          promu crossbuild -v --parallelism $CIRCLE_NODE_TOTAL --parallelism-thread $CIRCLE_NODE_INDEX
    - run:
        name: Build Darwin
        command: |
          promu --config .promu-cgo.yml crossbuild -v --parallelism $CIRCLE_NODE_TOTAL --parallelism-thread $CIRCLE_NODE_INDEX
    - persist_to_workspace:
        root: .
        paths:
        - .build
    - store_artifacts:
        path: .build
        destination: /build

  publish_main:
    executor: golang
    environment:
    - GHCR_REPO: "ghcr.io/enthus-it"
    steps:
    - checkout
    - run: go mod download
    - run: make promu
    - setup_remote_docker:
        version: edge
    - run:
        name: Print docker version
        command: docker version
    - run:
        name: Run linuxkit/binfmt
        command: |
          docker run --privileged linuxkit/binfmt:v1.0.0
    - attach_workspace:
        at: .
    - run:
        name: Build docker images
        command: make docker DOCKER_REPO=$GHCR_REPO
    - run:
        name: Print docker images
        command: docker images
    - run:
        name: GHCR Login
        command: |
          echo $GHCR_TOKEN | docker login -u $GHCR_USERNAME --password-stdin ghcr.io
    - run:
        name: GHCR Publish
        command: make docker-publish DOCKER_REPO=$GHCR_REPO
    - run:
        name: GHCR manifest
        command: make docker-manifest DOCKER_REPO=$GHCR_REPO

  publish_release:
    executor: golang
    environment:
    - GHCR_REPO: "ghcr.io/enthus-it"
    steps:
    - checkout
    - run: go mod download
    - run: make promu
    - setup_remote_docker:
        version: edge
    - run:
        name: Print docker version
        command: docker version
    - run:
        name: Run linuxkit/binfmt
        command: |
          docker run --privileged linuxkit/binfmt:v1.0.0
    - attach_workspace:
        at: .
    - run:
        name: Build docker images
        command: |
          make docker DOCKER_IMAGE_TAG="$CIRCLE_TAG" DOCKER_REPO=$GHCR_REPO
    - run:
        name: Print docker images
        command: docker images
    - run:
        name: GHCR Login
        command: |
          echo $GHCR_TOKEN | docker login -u $GHCR_USERNAME --password-stdin ghcr.io
    - run:
        name: GHCR Publish
        command: make docker-publish DOCKER_IMAGE_TAG="$CIRCLE_TAG" DOCKER_REPO=$GHCR_REPO
    - run:
        name: GHCR manifest
        command: make docker-manifest DOCKER_IMAGE_TAG="$CIRCLE_TAG" DOCKER_REPO=$GHCR_REPO
    - run:
        name: GHCR tag and publish latest
        command: |
          if [[ "$CIRCLE_TAG" =~ ^v[0-9]+(\.[0-9]+){2}$ ]]; then
            make docker-tag-latest DOCKER_IMAGE_TAG="$CIRCLE_TAG" DOCKER_REPO=$GHCR_REPO
            make docker-publish DOCKER_IMAGE_TAG="latest" DOCKER_REPO=$GHCR_REPO
            make docker-manifest DOCKER_IMAGE_TAG="latest" DOCKER_REPO=$GHCR_REPO
          fi

workflows:
  version: 2
  openziti_exporter:
    jobs:
    - codespell:
        filters:
          branches:
            only: main
          tags:
            only: /.*/
    - test:
        # Install promu and build
        filters:
          tags:
            only: /.*/
    - build:
        # This enable the environment variables
        context: org-global
        filters:
          tags:
            only: /.*/
    - publish_main:
        context: org-global
        requires:
        - test
        - build
        filters:
          branches:
            only: main
    - publish_release:
        context: org-global
        requires:
        - test
        - build
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
